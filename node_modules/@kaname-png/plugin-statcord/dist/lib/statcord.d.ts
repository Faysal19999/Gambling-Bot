/// <reference types="node" />
import EventEmitter from 'events';
import type { Snowflake } from 'discord.js';
import { PostStats, ClientStats, BucketStats, UserVotesStats, StatcordOptions } from './types';
/**
 * The Statcord class.
 * @since 1.0.0
 */
export declare class Statcord extends EventEmitter {
    private readonly options?;
    private activeUsers;
    private popularCommands;
    private commandsRun;
    private defaultHeader;
    private bandwidthUsage;
    private baseUrl;
    constructor(options?: StatcordOptions | undefined);
    /**
     * Post the statistics collected from the client to Statcord.
     * @since 1.0.0
     */
    postStats(): Promise<PostStats | null>;
    /**
     * Get current client statistics in Statcord.
     * @since 1.0.0
     */
    clientStats(): Promise<ClientStats | null>;
    /**
     * Check everyone who has voted for the bot today.
     * @param days How many days back votes should be fetched for.
     * @since 1.0.0
     */
    bucketStats(days?: string): Promise<BucketStats | null>;
    /**
     * Check if someone has voted for the bot today.
     * @param userId The ID of the user you are checking for.
     * @param days How many days back votes should be fetched for.
     * @since 1.0.0
     */
    userVotesStats(userId: string, days?: number): Promise<UserVotesStats | null>;
    /**
     * Set the current bot network usage. It is reset at each statistics post.
     * @param usage Bandwidth usage.
     * @since 1.0.0
     */
    setBandwidthUsage(usage: string): void;
    postCommand(commandId: string, author: Snowflake): number;
    private computeMembersGuilds;
    private computeTotalGuilds;
    private getPopularCommands;
    private getClientId;
}
//# sourceMappingURL=statcord.d.ts.map