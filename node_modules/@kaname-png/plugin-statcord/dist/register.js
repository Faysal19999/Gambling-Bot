"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatcordPlugin = void 0;
const framework_1 = require("@sapphire/framework");
const path_1 = require("path");
const index_1 = require("./index");
/**
 * Plugin allowing Out of the box Statcord integration with @sapphire/framework.
 * @since 1.0.0
 */
class StatcordPlugin extends framework_1.Plugin {
    static [framework_1.preGenericsInitialization]() {
        framework_1.container.statcord = new index_1.Statcord(this.options.statcord);
    }
    static [framework_1.postInitialization]() {
        this.stores.get('listeners').registerPath((0, path_1.join)(__dirname, 'listeners'));
    }
    static [framework_1.postLogin]() {
        if (this.options.statcord?.key) {
            framework_1.container.logger.info('[Statcord-Plugin]: Enabled. Synchronizing states with Statcord.');
        }
        if ((this.options.statcord?.autopost ?? true) && this.options.statcord?.key) {
            framework_1.container.logger.info('[Statcord-Plugin]: Auto-posting of statistics has been enabled');
            setInterval(async () => framework_1.container.statcord.postStats(), 60000);
        }
        if (this.shard && this.options?.statcord?.sharding && this.options.statcord?.key) {
            framework_1.container.logger.info('[Statcord-Plugin]: Sharding mode enabled');
        }
    }
}
exports.StatcordPlugin = StatcordPlugin;
framework_1.SapphireClient.plugins.registerPreGenericsInitializationHook(StatcordPlugin[framework_1.preGenericsInitialization], 'Statcord-PreGenericsInitialization');
framework_1.SapphireClient.plugins.registerPostInitializationHook(StatcordPlugin[framework_1.postInitialization], 'Statcord-PostInitialization');
framework_1.SapphireClient.plugins.registerPostLoginHook(StatcordPlugin[framework_1.postLogin], 'Statcord-PostLogin');
//# sourceMappingURL=register.js.map