"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreArgument = void 0;
require("../lib/errors/Identifiers");
const resolvers_1 = require("../lib/resolvers");
const Argument_1 = require("../lib/structures/Argument");
class CoreArgument extends Argument_1.Argument {
    constructor(context) {
        super(context, { name: 'integer' });
        this.messages = {
            ["integerTooSmall" /* Identifiers.ArgumentIntegerTooSmall */]: ({ minimum }) => `The given number must be greater than ${minimum}.`,
            ["integerTooLarge" /* Identifiers.ArgumentIntegerTooLarge */]: ({ maximum }) => `The given number must be less than ${maximum}.`,
            ["integerError" /* Identifiers.ArgumentIntegerError */]: () => 'The argument did not resolve to a valid number.'
        };
    }
    run(parameter, context) {
        const resolved = (0, resolvers_1.resolveInteger)(parameter, { minimum: context.minimum, maximum: context.maximum });
        return resolved.mapErrInto((identifier) => this.error({
            parameter,
            identifier,
            message: this.messages[identifier](context),
            context
        }));
    }
}
exports.CoreArgument = CoreArgument;
//# sourceMappingURL=CoreInteger.js.map