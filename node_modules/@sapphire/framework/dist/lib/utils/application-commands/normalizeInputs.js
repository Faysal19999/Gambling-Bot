"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertApplicationCommandToApiData = exports.normalizeContextMenuCommand = exports.normalizeChatInputCommand = void 0;
const builders_1 = require("@discordjs/builders");
const utilities_1 = require("@sapphire/utilities");
const v10_1 = require("discord-api-types/v10");
const discord_js_1 = require("discord.js");
function isBuilder(command) {
    return command instanceof builders_1.SlashCommandBuilder;
}
function addDefaultsToChatInputJSON(data) {
    data.default_permission ?? (data.default_permission = true);
    data.dm_permission ?? (data.dm_permission = true);
    data.type ?? (data.type = v10_1.ApplicationCommandType.ChatInput);
    // Localizations default to null from d.js
    data.name_localizations ?? (data.name_localizations = null);
    data.description_localizations ?? (data.description_localizations = null);
    return data;
}
function addDefaultsToContextMenuJSON(data) {
    data.default_permission ?? (data.default_permission = true);
    data.dm_permission ?? (data.dm_permission = true);
    // Localizations default to null from d.js
    data.name_localizations ?? (data.name_localizations = null);
    data.description_localizations ?? (data.description_localizations = null);
    return data;
}
function normalizeChatInputCommand(command) {
    if ((0, utilities_1.isFunction)(command)) {
        const builder = new builders_1.SlashCommandBuilder();
        command(builder);
        return addDefaultsToChatInputJSON(builder.toJSON());
    }
    if (isBuilder(command)) {
        return addDefaultsToChatInputJSON(command.toJSON());
    }
    const finalObject = {
        name: command.name,
        name_localizations: command.nameLocalizations,
        description: command.description,
        description_localizations: command.descriptionLocalizations,
        default_permission: command.defaultPermission,
        type: v10_1.ApplicationCommandType.ChatInput,
        dm_permission: command.dmPermission
    };
    if (command.defaultMemberPermissions) {
        finalObject.default_member_permissions = String(command.defaultMemberPermissions);
    }
    if (command.options?.length) {
        finalObject.options = command.options.map((option) => discord_js_1.ApplicationCommand['transformOption'](option));
    }
    return addDefaultsToChatInputJSON(finalObject);
}
exports.normalizeChatInputCommand = normalizeChatInputCommand;
function normalizeContextMenuCommand(command) {
    if ((0, utilities_1.isFunction)(command)) {
        const builder = new builders_1.ContextMenuCommandBuilder();
        command(builder);
        return addDefaultsToContextMenuJSON(builder.toJSON());
    }
    if (command instanceof builders_1.ContextMenuCommandBuilder) {
        return addDefaultsToContextMenuJSON(command.toJSON());
    }
    let type;
    switch (command.type) {
        case discord_js_1.Constants.ApplicationCommandTypes.MESSAGE:
        case 'MESSAGE':
            type = v10_1.ApplicationCommandType.Message;
            break;
        case discord_js_1.Constants.ApplicationCommandTypes.USER:
        case 'USER':
            type = v10_1.ApplicationCommandType.User;
            break;
        default:
            // @ts-expect-error command gets turned to never, which is half true.
            throw new Error(`Unhandled command type: ${command.type}`);
    }
    const finalObject = {
        name: command.name,
        name_localizations: command.nameLocalizations,
        type,
        default_permission: command.defaultPermission,
        dm_permission: command.dmPermission
    };
    if (command.defaultMemberPermissions) {
        finalObject.default_member_permissions = String(command.defaultMemberPermissions);
    }
    return addDefaultsToContextMenuJSON(finalObject);
}
exports.normalizeContextMenuCommand = normalizeContextMenuCommand;
function convertApplicationCommandToApiData(command) {
    const returnData = {
        name: command.name,
        name_localizations: command.nameLocalizations,
        default_permission: command.defaultPermission,
        dm_permission: command.dmPermission
    };
    if (command.defaultMemberPermissions) {
        returnData.default_member_permissions = command.defaultMemberPermissions.bitfield.toString();
    }
    if (command.type === 'CHAT_INPUT') {
        returnData.type = v10_1.ApplicationCommandType.ChatInput;
        returnData.description = command.description;
        // TODO (favna): Remove this line after website rewrite is done
        // @ts-ignore this is currently ignored for the website
        returnData.description_localizations = command.descriptionLocalizations;
    }
    else if (command.type === 'MESSAGE') {
        returnData.type = v10_1.ApplicationCommandType.Message;
    }
    else if (command.type === 'USER') {
        returnData.type = v10_1.ApplicationCommandType.User;
    }
    if (command.options.length) {
        returnData.options = command.options.map((option) => discord_js_1.ApplicationCommand['transformOption'](option));
    }
    return returnData;
}
exports.convertApplicationCommandToApiData = convertApplicationCommandToApiData;
//# sourceMappingURL=normalizeInputs.js.map