"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNeededRegistryParameters = void 0;
const pieces_1 = require("@sapphire/pieces");
async function getNeededRegistryParameters(guildIds = new Set()) {
    const { client } = pieces_1.container;
    const applicationCommands = client.application.commands;
    const globalCommands = await applicationCommands.fetch({ withLocalizations: true });
    const guildCommands = await fetchGuildCommands(applicationCommands, guildIds);
    return {
        applicationCommands,
        globalCommands,
        guildCommands
    };
}
exports.getNeededRegistryParameters = getNeededRegistryParameters;
async function fetchGuildCommands(commands, guildIds) {
    const map = new Map();
    for (const guildId of guildIds) {
        try {
            const guildCommands = await commands.fetch({ guildId, withLocalizations: true });
            map.set(guildId, guildCommands);
        }
        catch (err) {
            const { preventFailedToFetchLogForGuilds } = pieces_1.container.client.options;
            if (preventFailedToFetchLogForGuilds === true)
                continue;
            if (Array.isArray(preventFailedToFetchLogForGuilds) && !preventFailedToFetchLogForGuilds?.includes(guildId)) {
                const guild = pieces_1.container.client.guilds.resolve(guildId) ?? { name: 'Guild not in cache' };
                pieces_1.container.logger.warn(`ApplicationCommandRegistries: Failed to fetch guild commands for guild "${guild.name}" (${guildId}).`, 'Make sure to authorize your application with the "applications.commands" scope in that guild.');
            }
        }
    }
    return map;
}
//# sourceMappingURL=getNeededParameters.js.map