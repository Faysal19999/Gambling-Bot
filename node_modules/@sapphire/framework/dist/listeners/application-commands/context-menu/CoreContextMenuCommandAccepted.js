"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreListener = void 0;
const result_1 = require("@sapphire/result");
const stopwatch_1 = require("@sapphire/stopwatch");
const Listener_1 = require("../../../lib/structures/Listener");
const Events_1 = require("../../../lib/types/Events");
class CoreListener extends Listener_1.Listener {
    constructor(context) {
        super(context, { event: Events_1.Events.ContextMenuCommandAccepted });
    }
    async run(payload) {
        const { command, context, interaction } = payload;
        const result = await result_1.Result.fromAsync(async () => {
            this.container.client.emit(Events_1.Events.ContextMenuCommandRun, interaction, command, { ...payload });
            const stopwatch = new stopwatch_1.Stopwatch();
            const result = await command.contextMenuRun(interaction, context);
            const { duration } = stopwatch.stop();
            this.container.client.emit(Events_1.Events.ContextMenuCommandSuccess, { ...payload, result, duration });
            return duration;
        });
        result.inspectErr((error) => this.container.client.emit(Events_1.Events.ContextMenuCommandError, error, { ...payload, duration: -1 }));
        this.container.client.emit(Events_1.Events.ContextMenuCommandFinish, interaction, command, {
            ...payload,
            success: result.isOk(),
            duration: result.unwrapOr(-1)
        });
    }
}
exports.CoreListener = CoreListener;
//# sourceMappingURL=CoreContextMenuCommandAccepted.js.map