import type { Awaitable } from '../common/utils';
import type { Option } from '../Option';
import { type Err } from '../Result/Err';
import { type Ok } from '../Result/Ok';
import type { IOption } from './IOption';
import type { Some } from './Some';
export declare class None implements IOption<any> {
    isSome(): false;
    isSomeAnd(cb?: (value: never) => boolean): false;
    isNone(): this is None;
    expect(message: string): never;
    unwrap(): never;
    unwrapOr<R>(defaultValue: R): R;
    unwrapOrElse<R>(cb: () => R): R;
    map(cb: (value: never) => any): this;
    mapInto(cb: (value: never) => Option<any>): this;
    mapOr<R>(defaultValue: R, cb?: (value: never) => R): R;
    mapOrElse<R>(defaultValue: () => R, cb?: (value: never) => R): R;
    mapNoneInto<R extends Option<any>>(cb: () => R): R;
    inspect(cb?: (value: never) => void): this;
    inspectAsync(cb?: (value: never) => Awaitable<unknown>): Promise<this>;
    okOr<E>(error: E): Err<E>;
    okOrElse<E>(cb: () => E): Err<E>;
    iter(): Generator<never>;
    and(option: Option<any>): this;
    andThen(cb: (value: never) => Option<any>): this;
    or<R extends Option<any>>(option: R): R;
    orElse<R extends Option<any>>(cb: () => R): R;
    xor<T>(option: None): None;
    xor<T>(option: Some<T>): Some<T>;
    xor<T>(option: Option<T>): Some<T> | None;
    filter(predicate: (value: never) => boolean): None;
    contains(value?: any): false;
    zip(other: Option<any>): None;
    zipWith(other: Option<any>, f: (s: never, o: never) => any): None;
    unzip(): [None, None];
    transpose(): Ok<None>;
    flatten(): None;
    intoPromise(): Promise<None>;
    eq(other: None): true;
    eq(other: Some<any>): false;
    eq(other: Option<any>): boolean;
    ne(other: None): false;
    ne(other: Some<any>): true;
    ne(other: Option<any>): boolean;
    match<SomeValue, NoneValue>(branches: {
        some(value: never): SomeValue;
        none(): NoneValue;
    }): NoneValue;
    [Symbol.iterator](): Generator<never>;
}
export declare const none: None;
//# sourceMappingURL=None.d.ts.map