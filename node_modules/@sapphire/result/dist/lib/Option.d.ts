import { Awaitable } from './common/utils';
import { none as _none } from './Option/None';
import { some as _some } from './Option/Some';
export * from './Option/IOption';
export * from './Option/OptionError';
export { _some as some, _none as none };
/**
 * The union of the two variations of `Option`.
 * @typeparam T The value's type.
 */
export declare type Option<T> = Option.Some<T> | Option.None;
export declare namespace Option {
    type Resolvable<T> = T | null | undefined | Option<T>;
    function is<T>(value: Option<T>): true;
    function is(value: any): value is Option<unknown>;
    /**
     * Creates an {@link Option} out of a value or callback.
     * @typeparam T The result's type.
     */
    function from<T>(op: Resolvable<T> | (() => Resolvable<T>)): Option<T>;
    /**
     * Creates an {@link Option} out of a value or callback.
     * @typeparam T The result's type.
     */
    function fromAsync<T>(op: Awaitable<Resolvable<T>> | (() => Awaitable<Resolvable<T>>)): Promise<Option<T>>;
    const none: import("./Option/None").None;
    const some: typeof _some;
    type Some<T> = import('./Option/Some').Some<T>;
    type None = import('./Option/None').None;
    type UnwrapSome<T extends Option<any>> = T extends Some<infer S> ? S : never;
}
//# sourceMappingURL=Option.d.ts.map